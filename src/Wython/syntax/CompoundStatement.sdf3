module CompoundStatement

imports
  
  Common
  ID
  Expression
  Program
  Statement
  SimpleStatement
  Parameters
  Test
  Class

context-free start-symbols

  CompoundStatement

context-free syntax

    CompoundStatement.If = "if" Test ":" Suite Elif* Else?
    CompoundStatement.While = "while" Test ":" Suite Else?
    CompoundStatement.For = For
    CompoundStatement.Try = "try" ":" Suite Except+ Else? Finally?
    CompoundStatement.TryFinally = "try" ":" Suite Finally
    CompoundStatement.With = With
    CompoundStatement.FuncDef = "Def" ID Parameters? FuncType ":" Suite
    CompoundStatement.ClassDef = "class" ID ArgList? ":" Suite
    CompoundStatement.Decorated = Decorators Definition
    CompoundStatement.AsyncFunc = Async FuncDef
    CompoundStatement.AsyncWith = Async With
    CompoundStatement.AsyncFor = Async For
    
    With.With = "with" WithItem WithItemNode* ":" Suite

    For.For = "for" ExpList "in" TestList ":" Suite Else?
    
    Finally.Finally = "finally" ":" Suite

    Except.Except = ExceptClause ":" Suite
    
    ExceptClause.ExceptClause = "except" ExceptArgument?

    ExceptArgument.ExceptArgument = Test AsID?

    Decorators.Decorators = Decorator+
    
    Decorator.Decorator = "@" DottedName ArgList? NewLine

    Definition.ClassDef = ClassDef
    Definition.FuncDef = FuncDef
    Definition.AsyncFuncDef = AsyncFuncDef
    
    AsyncFuncDef.AsyncFuncDef = Async FuncDef
    
    FuncDef.FuncDef = "def" ID Parameters FuncType? ":" Suite
    
    ArgList.ArgList = "(" Argument ArgumentListNode* Comma? ")"

    ArgumentListNode.ArgumentListNode = "," Argument

    Argument.CompForArgument = Test CompFor?
    Argument.Assignment = Test "=" Test
    Argument.Kwargs = "**" Test
    Argument.Args = "*" Test

    CompFor.CompFor = Async? "for" ExpList "in" OrTest CompIter?
    
    Async.Async = "async"
    
    CompIf.CompIf = "if" TestNocond CompIter?

    CompIter.CompFor = CompFor

    WithItem.Item = Test WithItemAs?
    WithItemAs.As = "as" Exp
    
    WithItemNode.WithItemNode = "," WithItem

    Elif.Elif = "elif" Test ":" Suite
    
    Else.Else = "else" ":" Suite
    
    FuncType.FuncType = "->" Test

    Suite.Statement = SimpleStatement
    // TODO
  //  Suite.BlockLine = NewLine Indent Statement+ Dedent

  CompoundStatement.OldIf = <
    if <Exp>:
       <then:Block>
    <else:IfElse?>
  > {layout(
     indent "if" then &&
     align "if" else
  )}
  
  IfElse.OldElif = <
    elif <Exp>:
       <then:Block>
    <else:IfElse?>
  > {layout(
     indent "elif" then &&
     align "elif" else
  )}
  
  IfElse.OldElse = <
    else:
       <then:Block>
  > {layout(
     indent "else:" then &&
     offside "else:" then
  )}
     