module CompoundStatement

imports
  
  Common
  ID
  Expression
  Program
  Statement
  SimpleStatement
  Test

context-free start-symbols

  CompoundStatement

context-free syntax

    CompoundStatement.If = "if" Test ":" Suite Elif* Else?
    CompoundStatement.While = "while" Test ":" Suite Else?
    CompoundStatement.For = "for" ExpressionList "in" TestList ":" Suite Else?
    CompoundStatement.Try = 
    CompoundStatement.With = "with" WithItem WithItemNode* ":" Suite
    CompoundStatement.Funcdef = "def" ID "(" TypedParamsList? ")" FuncType ":" Suite
    CompoundStatement.Classdef = "class" ID ArgList? ":" Suite
    CompoundStatement.Decorated = Decorators Definition
    CompoundStatement.Async =
    
    Decorators.Decorators: Decorator+
    
    Decorator.Decorator = "@" DottedName ArgList? NewLine

    Definition.Classdef = Classdef
    Definition.Funcdef = Funcdef
    Definition.AsyncFuncdef = AsyncFuncdef
    
    ArgList.ArgList = "(" Argument ArgumentListNode* Comma? ")"

    ArgumentListNode.ArgumentListNode = "," Argument

    Argument.CompForArgument = Test CompFor?
    Argument.Assignment = Test "=" Test
    Argument.Kwargs = "**" Test
    Argument.Args = "*" Test

    CompFor.CompFor = Async? "for" ExpressionList "in" OrTest CompIter?
    
    Async.Async = "async"
    
    CompIf.CompIf = "if" TestNocond CompIter?

    CompIter.CompFor = CompFor

    WithItem.Item = Test WithItemAs?
    WithItemAs.As = "as" Exp
    
    WithItemNode.WithItemNode = "," WithItem
    

    Elif.Elif = "elif" Test ":" Suite
    
    Else.Else = "else" ":" Suite
    
    FuncType.FuncType = "->" Test

    Suite.Statement = SimpleStatement
    Suite.BlockLine = NewLine Indent Statement+ Dedent

  CompoundStatement.OldIf = <
    if <Exp>:
       <then:Block>
    <else:IfElse?>
  > {layout(
     indent "if" then &&
     align "if" else
  )}
  
  IfElse.OldElif = <
    elif <Exp>:
       <then:Block>
    <else:IfElse?>
  > {layout(
     indent "elif" then &&
     align "elif" else
  )}
  
  IfElse.OldElse = <
    else:
       <then:Block>
  > {layout(
     indent "else:" then &&
     offside "else:" then
  )}
     